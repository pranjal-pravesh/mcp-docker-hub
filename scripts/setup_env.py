#!/usr/bin/env python3
"""
Environment Setup Script for MCP Hub
Helps you set up environment variables for MCP servers
"""

import os
import sys
from pathlib import Path

def setup_env():
    """Interactive environment variable setup"""
    
    env_file = Path(".env")
    
    # Check if .env exists
    if env_file.exists():
        print("üìÅ Found existing .env file")
        response = input("Do you want to update it? (y/n): ").lower()
        if response != 'y':
            print("Setup cancelled.")
            return
    else:
        print("üìÅ Creating new .env file")
    
    # Load existing values
    existing_vars = {}
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    existing_vars[key] = value
    
    # Define required environment variables
    env_vars = {
        "SLACK_BOT_TOKEN": {
            "description": "Slack Bot Token (for Slack integration)",
            "required": False,
            "example": "xoxb-your-bot-token"
        },
        "SLACK_TEAM_ID": {
            "description": "Slack Team ID (for Slack integration)",
            "required": False,
            "example": "T1234567890"
        },
        "SLACK_CHANNEL_IDS": {
            "description": "Slack Channel IDs (comma-separated, optional)",
            "required": False,
            "example": "C1234567890,C0987654321"
        },
        "BRAVE_API_KEY": {
            "description": "Brave Search API Key (for web search)",
            "required": False,
            "example": "your-brave-api-key"
        },
        "WOLFRAM_API_KEY": {
            "description": "Wolfram Alpha API Key (for computational queries)",
            "required": False,
            "example": "your-wolfram-api-key"
        },
        "GITHUB_TOKEN": {
            "description": "GitHub Personal Access Token (for GitHub integration)",
            "required": False,
            "example": "ghp_your-github-token"
        },
        "POSTGRES_CONNECTION_STRING": {
            "description": "PostgreSQL Connection String (for database operations)",
            "required": False,
            "example": "postgresql://user:password@localhost:5432/dbname"
        },
        "REDIS_URL": {
            "description": "Redis Connection URL (for cache operations)",
            "required": False,
            "example": "redis://localhost:6379"
        },
        "OPENWEATHER_API_KEY": {
            "description": "OpenWeather API Key (for weather information)",
            "required": False,
            "example": "your-openweather-api-key"
        },
        "NEWS_API_KEY": {
            "description": "News API Key (for news articles)",
            "required": False,
            "example": "your-news-api-key"
        },
        "GOOGLE_CALENDAR_CREDENTIALS": {
            "description": "Google Calendar Credentials File Path (for calendar integration)",
            "required": False,
            "example": "/path/to/credentials.json"
        }
    }
    
    print("\nüîß MCP Hub Environment Setup")
    print("=" * 50)
    print("This script will help you set up environment variables for MCP servers.")
    print("You can skip any variable by pressing Enter (it will be commented out).")
    print()
    
    new_vars = {}
    
    for var_name, config in env_vars.items():
        print(f"\nüìù {var_name}")
        print(f"   Description: {config['description']}")
        print(f"   Example: {config['example']}")
        
        # Show current value if it exists
        current_value = existing_vars.get(var_name, "")
        if current_value:
            print(f"   Current: {current_value[:20]}{'...' if len(current_value) > 20 else ''}")
        
        # Get new value
        new_value = input(f"   Enter value (or press Enter to skip): ").strip()
        
        if new_value:
            new_vars[var_name] = new_value
        elif current_value:
            # Keep existing value
            new_vars[var_name] = current_value
    
    # Write to .env file
    with open(env_file, 'w') as f:
        f.write("# MCP Hub Server Environment Variables\n")
        f.write("# Generated by setup_env.py\n\n")
        
        for var_name, value in new_vars.items():
            f.write(f"{var_name}={value}\n")
        
        # Add server configuration
        f.write("\n# Server Configuration\n")
        f.write("HOST=0.0.0.0\n")
        f.write("PORT=8000\n")
    
    print(f"\n‚úÖ Environment variables saved to {env_file}")
    print(f"üìã Configured {len(new_vars)} variables")
    
    # Show which servers will be available
    print("\nüöÄ Servers that will be available:")
    available_servers = []
    
    for var_name, config in env_vars.items():
        if var_name in new_vars:
            if var_name == "SLACK_BOT_TOKEN" and "SLACK_TEAM_ID" in new_vars:
                available_servers.append("slack")
            elif var_name == "BRAVE_API_KEY":
                available_servers.append("brave-search")
            elif var_name == "WOLFRAM_API_KEY":
                available_servers.append("wolfram-alpha")
            elif var_name == "GITHUB_TOKEN":
                available_servers.append("github")
            elif var_name == "POSTGRES_CONNECTION_STRING":
                available_servers.append("postgres")
            elif var_name == "REDIS_URL":
                available_servers.append("redis")
            elif var_name == "OPENWEATHER_API_KEY":
                available_servers.append("openweather")
            elif var_name == "NEWS_API_KEY":
                available_servers.append("news")
            elif var_name == "GOOGLE_CALENDAR_CREDENTIALS":
                available_servers.append("calendar")
    
    # Always available servers
    available_servers.append("file-system")
    
    if available_servers:
        for server in sorted(set(available_servers)):
            print(f"   ‚úÖ {server}")
    else:
        print("   ‚ö†Ô∏è  No servers will be available (no API keys configured)")
    
    print(f"\nüí° To start the hub with these servers:")
    print(f"   python -m mcp_hub.mcp_hub_server --load-config")

if __name__ == "__main__":
    setup_env() 